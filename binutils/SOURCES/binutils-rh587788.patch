2010-04-30  H.J. Lu  <hongjiu.lu@intel.com>

bfd/:
	PR ld/11542
	* elf-bfd.h (RELOC_AGAINST_DISCARDED_SECTION): New.

	* elf32-i386.c (elf_i386_relocate_section): Use it.
	* elf64-x86-64.c (elf64_x86_64_relocate_section): Likewise.

ld/testsuite/:
	PR ld/11542
	* ld-elf/discard.ld: New.
	* ld-elf/discard1.d: Likewise.
	* ld-elf/discard1.s: Likewise.
	* ld-elf/discard2.d: Likewise.
	* ld-elf/discard2.s: Likewise.
	* ld-elf/discard3.d: Likewise.

Index: binutils-2.20.51.0.2/bfd/elf-bfd.h
===================================================================
--- binutils-2.20.51.0.2.orig/bfd/elf-bfd.h
+++ binutils-2.20.51.0.2/bfd/elf-bfd.h
@@ -2312,6 +2312,48 @@ extern asection _bfd_elf_large_com_secti
     }									\
   while (0)
 
+/* This macro is to avoid lots of duplicated code in the body of the
+   loop over relocations in xxx_relocate_section() in the various
+   elfxx-xxxx.c files.
+   
+   Handle relocations against symbols from removed linkonce sections,
+   or sections discarded by a linker script.  When doing a relocatable
+   link, we remove such relocations.  Otherwise, we just want the
+   section contents zeroed and avoid any special processing.  */
+#define RELOC_AGAINST_DISCARDED_SECTION(info, input_bfd, input_section,	\
+					rel, relend, howto, contents)	\
+  {									\
+    if (info->relocatable						\
+	&& (input_section->flags & SEC_DEBUGGING))			\
+      {									\
+	/* Only remove relocations in debug sections since other	\
+	   sections may require relocations.  */			\
+	Elf_Internal_Shdr *rel_hdr;					\
+									\
+	rel_hdr = &elf_section_data (input_section->output_section)->rel_hdr; \
+									\
+	/* Avoid empty output section.  */				\
+	if (rel_hdr->sh_size > rel_hdr->sh_entsize)			\
+	  {								\
+	    rel_hdr->sh_size -= rel_hdr->sh_entsize;			\
+	    rel_hdr = &elf_section_data (input_section)->rel_hdr;	\
+	    rel_hdr->sh_size -= rel_hdr->sh_entsize;			\
+									\
+	    memmove (rel, rel + 1, (relend - rel) * sizeof (*rel));	\
+									\
+	    input_section->reloc_count--;				\
+	    relend--;							\
+	    rel--;							\
+	    continue;							\
+	  }								\
+      }									\
+									\
+    _bfd_clear_contents (howto, input_bfd, contents + rel->r_offset);	\
+    rel->r_info = 0;							\
+    rel->r_addend = 0;							\
+    continue;								\
+  }
+
 /* Will a symbol be bound to the the definition within the shared
    library, if any.  */
 #define SYMBOLIC_BIND(INFO, H) \
Index: binutils-2.20.51.0.2/bfd/elf32-i386.c
===================================================================
--- binutils-2.20.51.0.2.orig/bfd/elf32-i386.c
+++ binutils-2.20.51.0.2/bfd/elf32-i386.c
@@ -2939,15 +2939,8 @@ elf_i386_relocate_section (bfd *output_b
 	}
 
       if (sec != NULL && elf_discarded_section (sec))
-	{
-	  /* For relocs against symbols from removed linkonce sections,
-	     or sections discarded by a linker script, we just want the
-	     section contents zeroed.  Avoid any special processing.  */
-	  _bfd_clear_contents (howto, input_bfd, contents + rel->r_offset);
-	  rel->r_info = 0;
-	  rel->r_addend = 0;
-	  continue;
-	}
+	RELOC_AGAINST_DISCARDED_SECTION (info, input_bfd, input_section,
+					 rel, relend, howto, contents);
 
       if (info->relocatable)
 	continue;
Index: binutils-2.20.51.0.2/bfd/elf64-x86-64.c
===================================================================
--- binutils-2.20.51.0.2.orig/bfd/elf64-x86-64.c
+++ binutils-2.20.51.0.2/bfd/elf64-x86-64.c
@@ -2668,15 +2668,8 @@ elf64_x86_64_relocate_section (bfd *outp
 	}
 
       if (sec != NULL && elf_discarded_section (sec))
-	{
-	  /* For relocs against symbols from removed linkonce sections,
-	     or sections discarded by a linker script, we just want the
-	     section contents zeroed.  Avoid any special processing.  */
-	  _bfd_clear_contents (howto, input_bfd, contents + rel->r_offset);
-	  rel->r_info = 0;
-	  rel->r_addend = 0;
-	  continue;
-	}
+	RELOC_AGAINST_DISCARDED_SECTION (info, input_bfd, input_section,
+					 rel, relend, howto, contents);
 
       if (info->relocatable)
 	continue;
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard.ld
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard.ld
@@ -0,0 +1,3 @@
+SECTIONS {
+        /DISCARD/ : { *(.discard) }
+}
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard1.d
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard1.d
@@ -0,0 +1,9 @@
+#source: discard1.s
+#ld: -r -T discard.ld
+#readelf: -r
+#target: x86_64-*-linux-gnu i?86-*-linux-gnu
+
+Relocation section '.rel.*.debug_info' at offset 0x[0-9a-z]+ contains 1 entries:
+[ \t]+Offset[ \t]+Info[ \t]+Type[ \t]+Sym.*
+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_.*[ \t]+[0-9a-f]+[ \t]+bar.*
+#pass
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard1.s
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard1.s
@@ -0,0 +1,11 @@
+	.globl bar
+	.data
+bar:
+	.long	1
+	.section	.discard,"aw",%progbits
+	.align 4
+there:
+	.long	2
+	.section	.debug_info,"",%progbits
+	.long	bar
+	.long	there
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard2.d
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard2.d
@@ -0,0 +1,9 @@
+#source: discard2.s
+#ld: -r -T discard.ld
+#readelf: -r
+#target: x86_64-*-linux-gnu i?86-*-linux-gnu
+
+Relocation section '.rel.*.debug_info' at offset 0x[0-9a-z]+ contains 1 entries:
+[ \t]+Offset[ \t]+Info[ \t]+Type[ \t]+Sym.*
+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_.*[ \t]+[0-9a-f]+[ \t]+here.*
+#pass
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard2.s
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard2.s
@@ -0,0 +1,12 @@
+	.globl here
+	.data
+here:
+	.long	1
+	.globl there
+	.section	.discard,"aw",%progbits
+	.align 4
+there:
+	.long	2
+	.section	.debug_info,"",%progbits
+	.long	here
+	.long	there
Index: binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard3.d
===================================================================
--- /dev/null
+++ binutils-2.20.51.0.2/ld/testsuite/ld-elf/discard3.d
@@ -0,0 +1,11 @@
+#source: discard1.s
+#source: discard2.s
+#ld: -r -T discard.ld
+#readelf: -r
+#target: x86_64-*-linux-gnu i?86-*-linux-gnu
+
+Relocation section '.rel.*.debug_info' at offset 0x[0-9a-z]+ contains 2 entries:
+[ \t]+Offset[ \t]+Info[ \t]+Type[ \t]+Sym.*
+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_.*[ \t]+[0-9a-f]+[ \t]+bar.*
+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_.*[ \t]+[0-9a-f]+[ \t]+here.*
+#pass
