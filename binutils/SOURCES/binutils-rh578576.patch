2010-04-05  Jakub Jelinek  <jakub@redhat.com>

bfd/
	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Handle CIE version 4
	provided that it has the expected address size and zero segment
	length.
binutils/
	* dwarf.c (struct Frame_Chunk): Add ptr_size and segment_size
	fields.
	(display_debug_frames): Handle CIE version 4.

2010-04-05  Jakub Jelinek  <jakub@redhat.com>

include/
	* dwarf2.h (DWARF2_Internal_LineInfo): Add li_max_ops_per_insn
	field.
bfd/
	* dwarf2.c (struct line_head): Add maximum_ops_per_insn field.
	(struct line_info): Add op_index field, change end_sequence type to
	unsigned char.
	(new_line_sorts_after): For the same address compare op_index.
	(add_line_info): Add op_index argument, store it into the structure.
	(decode_line_info): Complain about unknown versions of .debug_line.
	Initialize maximum_ops_per_insn.  Add op_index state register and
	track it.
binutils/
	* dwarf.c (struct State_Machine_Registers): Add op_index field,
	change end_sequence type to unsigned char.
	(reset_state_machine): Clear op_index.
	(process_extended_line_op): For DW_LNE_set_address clear op_index.
	(display_debug_lines_raw): Initialize li_max_ops_per_insn.
	Track op_index state machine register and print it if
	li_max_ops_per_insn is != 1.
	(display_debug_lines_decoded): Likewise.

2010-04-01  Jakub Jelinek  <jakub@redhat.com>

binutils/
	* dwarf.c (read_and_display_attr_value): Don't reject
	dwarf_version == 4.  Handle DW_FORM_sec_offset, DW_FORM_flag_present
	and DW_FORM_exprloc.
	(process_debug_info): Handle cu_version == 4.
	(display_debug_lines_raw, display_debug_lines_decoded): Handle
	li_version == 4.

2010-04-01  Jakub Jelinek  <jakub@redhat.com>

bfd/
	* dwarf2.c (read_attribute_value): Handle CU version 4
	for DW_FORM_ref_addr, handle DW_FORM_sec_offset, DW_FORM_exprloc
	and DW_FORM_flag_present.  For unknown form value return NULL.
	(scan_unit_for_symbols): For DW_AT_location handle DW_FORM_exprloc
	like DW_FORM_block.
	(parse_comp_unit): Allow CU version 4.

Index: binutils-2.20.51.0.2/bfd/dwarf2.c
===================================================================
--- binutils-2.20.51.0.2.orig/bfd/dwarf2.c
+++ binutils-2.20.51.0.2/bfd/dwarf2.c
@@ -45,6 +45,7 @@ struct line_head
   unsigned short version;
   bfd_vma prologue_length;
   unsigned char minimum_instruction_length;
+  unsigned char maximum_ops_per_insn;
   unsigned char default_is_stmt;
   int line_base;
   unsigned char line_range;
@@ -753,7 +754,7 @@ read_attribute_value (struct attribute *
     case DW_FORM_ref_addr:
       /* DW_FORM_ref_addr is an address in DWARF2, and an offset in
 	 DWARF3.  */
-      if (unit->version == 3)
+      if (unit->version == 3 || unit->version == 4)
 	{
 	  if (unit->offset_size == 4)
 	    attr->u.val = read_4_bytes (unit->abfd, info_ptr);
@@ -767,6 +768,13 @@ read_attribute_value (struct attribute *
       attr->u.val = read_address (unit, info_ptr);
       info_ptr += unit->addr_size;
       break;
+    case DW_FORM_sec_offset:
+      if (unit->offset_size == 4)
+	attr->u.val = read_4_bytes (unit->abfd, info_ptr);
+      else
+	attr->u.val = read_8_bytes (unit->abfd, info_ptr);
+      info_ptr += unit->offset_size;
+      break;
     case DW_FORM_block2:
       amt = sizeof (struct dwarf_block);
       blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
@@ -805,6 +813,7 @@ read_attribute_value (struct attribute *
       attr->u.str = read_indirect_string (unit, info_ptr, &bytes_read);
       info_ptr += bytes_read;
       break;
+    case DW_FORM_exprloc:
     case DW_FORM_block:
       amt = sizeof (struct dwarf_block);
       blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
@@ -831,6 +840,9 @@ read_attribute_value (struct attribute *
       attr->u.val = read_1_byte (abfd, info_ptr);
       info_ptr += 1;
       break;
+    case DW_FORM_flag_present:
+      attr->u.val = 1;
+      break;
     case DW_FORM_sdata:
       attr->u.sval = read_signed_leb128 (abfd, info_ptr, &bytes_read);
       info_ptr += bytes_read;
@@ -868,6 +880,7 @@ read_attribute_value (struct attribute *
       (*_bfd_error_handler) (_("Dwarf Error: Invalid or unhandled FORM value: %u."),
 			     form);
       bfd_set_error (bfd_error_bad_value);
+      return NULL;
     }
   return info_ptr;
 }
@@ -897,7 +910,8 @@ struct line_info
   char *filename;
   unsigned int line;
   unsigned int column;
-  int end_sequence;		/* End of (sequential) code sequence.  */
+  unsigned char op_index;
+  unsigned char end_sequence;		/* End of (sequential) code sequence.  */
 };
 
 struct fileinfo
@@ -963,7 +977,9 @@ new_line_sorts_after (struct line_info *
 {
   return (new_line->address > line->address
 	  || (new_line->address == line->address
-	      && new_line->end_sequence < line->end_sequence));
+	      && (new_line->op_index > line->op_index
+		  || (new_line->op_index == line->op_index
+		      && new_line->end_sequence < line->end_sequence))));
 }
 
 
@@ -975,6 +991,7 @@ new_line_sorts_after (struct line_info *
 static void
 add_line_info (struct line_info_table *table,
 	       bfd_vma address,
+	       unsigned char op_index,
 	       char *filename,
 	       unsigned int line,
 	       unsigned int column,
@@ -985,6 +1002,7 @@ add_line_info (struct line_info_table *t
 
   /* Set member data of 'info'.  */
   info->address = address;
+  info->op_index = op_index;
   info->line = line;
   info->column = column;
   info->end_sequence = end_sequence;
@@ -1015,6 +1033,7 @@ add_line_info (struct line_info_table *t
 
   if (table->last_line
       && table->last_line->address == address
+      && table->last_line->op_index == op_index
       && table->last_line->end_sequence == end_sequence)
     {
       /* We only keep the last entry with the same address and end
@@ -1225,6 +1244,13 @@ decode_line_info (struct comp_unit *unit
     }
   line_end = line_ptr + lh.total_length;
   lh.version = read_2_bytes (abfd, line_ptr);
+  if (lh.version < 2 || lh.version > 4)
+    {
+      (*_bfd_error_handler)
+	(_("Dwarf Error: Unhandled .debug_line version %d."), lh.version);
+      bfd_set_error (bfd_error_bad_value);
+      return NULL;
+    }
   line_ptr += 2;
   if (offset_size == 4)
     lh.prologue_length = read_4_bytes (abfd, line_ptr);
@@ -1233,6 +1259,20 @@ decode_line_info (struct comp_unit *unit
   line_ptr += offset_size;
   lh.minimum_instruction_length = read_1_byte (abfd, line_ptr);
   line_ptr += 1;
+  if (lh.version >= 4)
+    {
+      lh.maximum_ops_per_insn = read_1_byte (abfd, line_ptr);
+      line_ptr += 1;
+    }
+  else
+    lh.maximum_ops_per_insn = 1;
+  if (lh.maximum_ops_per_insn == 0)
+    {
+      (*_bfd_error_handler)
+	(_("Dwarf Error: Invalid maximum operations per instruction."));
+      bfd_set_error (bfd_error_bad_value);
+      return NULL;
+    }
   lh.default_is_stmt = read_1_byte (abfd, line_ptr);
   line_ptr += 1;
   lh.line_base = read_1_signed_byte (abfd, line_ptr);
@@ -1320,6 +1360,7 @@ decode_line_info (struct comp_unit *unit
     {
       /* State machine registers.  */
       bfd_vma address = 0;
+      unsigned char op_index = 0;
       char * filename = table->num_files ? concat_filename (table, 1) : NULL;
       unsigned int line = 1;
       unsigned int column = 0;
@@ -1343,11 +1384,21 @@ decode_line_info (struct comp_unit *unit
 	    {
 	      /* Special operand.  */
 	      adj_opcode = op_code - lh.opcode_base;
-	      address += (adj_opcode / lh.line_range)
-		* lh.minimum_instruction_length;
+	      if (lh.maximum_ops_per_insn == 1)
+		address += (adj_opcode / lh.line_range)
+			   * lh.minimum_instruction_length;
+	      else
+		{
+		  address += ((op_index + (adj_opcode / lh.line_range))
+			      / lh.maximum_ops_per_insn)
+			     * lh.minimum_instruction_length;
+		  op_index = (op_index + (adj_opcode / lh.line_range))
+			     % lh.maximum_ops_per_insn;
+		}
 	      line += lh.line_base + (adj_opcode % lh.line_range);
 	      /* Append row to matrix using current values.  */
-	      add_line_info (table, address, filename, line, column, 0);
+	      add_line_info (table, address, op_index, filename,
+			     line, column, 0);
 	      if (address < low_pc)
 		low_pc = address;
 	      if (address > high_pc)
@@ -1365,8 +1416,8 @@ decode_line_info (struct comp_unit *unit
 		{
 		case DW_LNE_end_sequence:
 		  end_sequence = 1;
-		  add_line_info (table, address, filename, line, column,
-				 end_sequence);
+		  add_line_info (table, address, op_index, filename,
+				 line, column, end_sequence);
 		  if (address < low_pc)
 		    low_pc = address;
 		  if (address > high_pc)
@@ -1375,6 +1426,7 @@ decode_line_info (struct comp_unit *unit
 		  break;
 		case DW_LNE_set_address:
 		  address = read_address (unit, line_ptr);
+		  op_index = 0;
 		  line_ptr += unit->addr_size;
 		  break;
 		case DW_LNE_define_file:
@@ -1422,15 +1474,26 @@ decode_line_info (struct comp_unit *unit
 		}
 	      break;
 	    case DW_LNS_copy:
-	      add_line_info (table, address, filename, line, column, 0);
+	      add_line_info (table, address, op_index,
+			     filename, line, column, 0);
 	      if (address < low_pc)
 		low_pc = address;
 	      if (address > high_pc)
 		high_pc = address;
 	      break;
 	    case DW_LNS_advance_pc:
-	      address += lh.minimum_instruction_length
-		* read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
+	      if (lh.maximum_ops_per_insn == 1)
+		address += lh.minimum_instruction_length
+			   * read_unsigned_leb128 (abfd, line_ptr,
+						   &bytes_read);
+	      else
+		{
+		  bfd_vma adjust = read_unsigned_leb128 (abfd, line_ptr,
+							 &bytes_read);
+		  address = ((op_index + adjust) / lh.maximum_ops_per_insn)
+			    * lh.minimum_instruction_length;
+		  op_index = (op_index + adjust) % lh.maximum_ops_per_insn;
+		}
 	      line_ptr += bytes_read;
 	      break;
 	    case DW_LNS_advance_line:
@@ -1460,11 +1523,20 @@ decode_line_info (struct comp_unit *unit
 	    case DW_LNS_set_basic_block:
 	      break;
 	    case DW_LNS_const_add_pc:
-	      address += lh.minimum_instruction_length
-		      * ((255 - lh.opcode_base) / lh.line_range);
+	      if (lh.maximum_ops_per_insn == 1)
+		address += lh.minimum_instruction_length
+			   * ((255 - lh.opcode_base) / lh.line_range);
+	      else
+		{
+		  bfd_vma adjust = ((255 - lh.opcode_base) / lh.line_range);
+		  address += lh.minimum_instruction_length
+			     * ((op_index + adjust) / lh.maximum_ops_per_insn);
+		  op_index = (op_index + adjust) % lh.maximum_ops_per_insn;
+		}
 	      break;
 	    case DW_LNS_fixed_advance_pc:
 	      address += read_2_bytes (abfd, line_ptr);
+	      op_index = 0;
 	      line_ptr += 2;
 	      break;
 	    default:
@@ -1930,6 +2002,7 @@ scan_unit_for_symbols (struct comp_unit 
 		    case DW_FORM_block1:
 		    case DW_FORM_block2:
 		    case DW_FORM_block4:
+		    case DW_FORM_exprloc:
 		      if (*attr.u.blk->data == DW_OP_addr)
 			{
 			  var->stack = 0;
@@ -2031,9 +2104,9 @@ parse_comp_unit (struct dwarf2_debug *st
   addr_size = read_1_byte (abfd, info_ptr);
   info_ptr += 1;
 
-  if (version != 2 && version != 3)
+  if (version != 2 && version != 3 && version != 4)
     {
-      (*_bfd_error_handler) (_("Dwarf Error: found dwarf version '%u', this reader only handles version 2 and 3 information."), version);
+      (*_bfd_error_handler) (_("Dwarf Error: found dwarf version '%u', this reader only handles version 2, 3 and 4 information."), version);
       bfd_set_error (bfd_error_bad_value);
       return 0;
     }
Index: binutils-2.20.51.0.2/bfd/elf-eh-frame.c
===================================================================
--- binutils-2.20.51.0.2.orig/bfd/elf-eh-frame.c
+++ binutils-2.20.51.0.2/bfd/elf-eh-frame.c
@@ -636,7 +636,9 @@ _bfd_elf_parse_eh_frame (bfd *abfd, stru
 	  REQUIRE (read_byte (&buf, end, &cie->version));
 
 	  /* Cannot handle unknown versions.  */
-	  REQUIRE (cie->version == 1 || cie->version == 3);
+	  REQUIRE (cie->version == 1
+		   || cie->version == 3
+		   || cie->version == 4);
 	  REQUIRE (strlen ((char *) buf) < sizeof (cie->augmentation));
 
 	  strcpy (cie->augmentation, (char *) buf);
@@ -651,6 +653,13 @@ _bfd_elf_parse_eh_frame (bfd *abfd, stru
 	      REQUIRE (skip_bytes (&buf, end, ptr_size));
 	      SKIP_RELOCS (buf);
 	    }
+	  if (cie->version >= 4)
+	    {
+	      REQUIRE (buf + 1 < end);
+	      REQUIRE (buf[0] == ptr_size);
+	      REQUIRE (buf[1] == 0);
+	      buf += 2;
+	    }
 	  REQUIRE (read_uleb128 (&buf, end, &cie->code_align));
 	  REQUIRE (read_sleb128 (&buf, end, &cie->data_align));
 	  if (cie->version == 1)
Index: binutils-2.20.51.0.2/binutils/dwarf.c
===================================================================
--- binutils-2.20.51.0.2.orig/binutils/dwarf.c
+++ binutils-2.20.51.0.2/binutils/dwarf.c
@@ -263,7 +263,8 @@ typedef struct State_Machine_Registers
   unsigned int column;
   int is_stmt;
   int basic_block;
-  int end_sequence;
+  unsigned char op_index;
+  unsigned char end_sequence;
 /* This variable hold the number of the last entry seen
    in the File Table.  */
   unsigned int last_file_entry;
@@ -275,6 +276,7 @@ static void
 reset_state_machine (int is_stmt)
 {
   state_machine_regs.address = 0;
+  state_machine_regs.op_index = 0;
   state_machine_regs.file = 1;
   state_machine_regs.line = 1;
   state_machine_regs.column = 0;
@@ -321,6 +323,7 @@ process_extended_line_op (unsigned char 
       adr = byte_get (data, len - bytes_read - 1);
       printf (_("set Address to 0x%lx\n"), adr);
       state_machine_regs.address = adr;
+      state_machine_regs.op_index = 0;
       break;
 
     case DW_LNE_define_file:
@@ -1153,14 +1156,14 @@ read_and_display_attr_value (unsigned lo
 	  uvalue = byte_get (data, pointer_size);
 	  data += pointer_size;
 	}
-      else if (dwarf_version == 3)
+      else if (dwarf_version == 3 || dwarf_version == 4)
 	{
 	  uvalue = byte_get (data, offset_size);
 	  data += offset_size;
 	}
       else
 	{
-	  error (_("Internal error: DWARF version is not 2 or 3.\n"));
+	  error (_("Internal error: DWARF version is not 2, 3 or 4.\n"));
 	}
       break;
 
@@ -1170,10 +1173,15 @@ read_and_display_attr_value (unsigned lo
       break;
 
     case DW_FORM_strp:
+    case DW_FORM_sec_offset:
       uvalue = byte_get (data, offset_size);
       data += offset_size;
       break;
 
+    case DW_FORM_flag_present:
+      uvalue = 1;
+      break;
+
     case DW_FORM_ref1:
     case DW_FORM_flag:
     case DW_FORM_data1:
@@ -1232,10 +1240,12 @@ read_and_display_attr_value (unsigned lo
 
     case DW_FORM_data4:
     case DW_FORM_addr:
+    case DW_FORM_sec_offset:
       if (!do_loc)
 	printf (" 0x%lx", uvalue);
       break;
 
+    case DW_FORM_flag_present:
     case DW_FORM_flag:
     case DW_FORM_data1:
     case DW_FORM_data2:
@@ -1271,6 +1281,7 @@ read_and_display_attr_value (unsigned lo
       break;
 
     case DW_FORM_block:
+    case DW_FORM_exprloc:
       uvalue = read_leb128 (data, & bytes_read, 0);
       block_start = data + bytes_read;
       if (do_loc)
@@ -1351,7 +1362,9 @@ read_and_display_attr_value (unsigned lo
 	case DW_AT_segment:
 	case DW_AT_static_link:
 	case DW_AT_use_location:
-    	  if (form == DW_FORM_data4 || form == DW_FORM_data8)
+    	  if (form == DW_FORM_data4
+	      || form == DW_FORM_data8
+	      || form == DW_FORM_sec_offset)
 	    {
 	      /* Process location list.  */
 	      unsigned int max = debug_info_p->max_loc_offsets;
@@ -1380,7 +1393,9 @@ read_and_display_attr_value (unsigned lo
 	  break;
 
 	case DW_AT_ranges:
-	  if (form == DW_FORM_data4 || form == DW_FORM_data8)
+	  if (form == DW_FORM_data4
+	      || form == DW_FORM_data8
+	      || form == DW_FORM_sec_offset)
 	    {
 	      /* Process range list.  */
 	      unsigned int max = debug_info_p->max_range_lists;
@@ -1590,7 +1605,9 @@ read_and_display_attr_value (unsigned lo
     case DW_AT_segment:
     case DW_AT_static_link:
     case DW_AT_use_location:
-      if (form == DW_FORM_data4 || form == DW_FORM_data8)
+      if (form == DW_FORM_data4
+	  || form == DW_FORM_data8
+	  || form == DW_FORM_sec_offset)
 	printf (_("(location list)"));
       /* Fall through.  */
     case DW_AT_allocated:
@@ -2035,7 +2052,9 @@ process_debug_info (struct dwarf_section
       tags = hdrptr;
       start += compunit.cu_length + initial_length_size;
 
-      if (compunit.cu_version != 2 && compunit.cu_version != 3)
+      if (compunit.cu_version != 2
+	  && compunit.cu_version != 3
+	  && compunit.cu_version != 4)
 	{
 	  warn (_("CU at offset %lx contains corrupt or unsupported version number: %d.\n"),
 		cu_offset, compunit.cu_version);
@@ -2266,9 +2285,11 @@ display_debug_lines_raw (struct dwarf_se
       /* Check its version number.  */
       info.li_version = byte_get (hdrptr, 2);
       hdrptr += 2;
-      if (info.li_version != 2 && info.li_version != 3)
+      if (info.li_version != 2
+	  && info.li_version != 3
+	  && info.li_version != 4)
 	{
-	  warn (_("Only DWARF version 2 and 3 line info is currently supported.\n"));
+	  warn (_("Only DWARF version 2, 3 and 4 line info is currently supported.\n"));
 	  return 0;
 	}
 
@@ -2276,6 +2297,18 @@ display_debug_lines_raw (struct dwarf_se
       hdrptr += offset_size;
       info.li_min_insn_length = byte_get (hdrptr, 1);
       hdrptr++;
+      if (info.li_version >= 4)
+	{
+	  info.li_max_ops_per_insn = byte_get (hdrptr, 1);
+	  hdrptr++;
+	  if (info.li_max_ops_per_insn == 0)
+	    {
+	      warn (_("Invalid maximum operations per insn.\n"));
+	      return 0;
+	    }
+	}
+      else
+	info.li_max_ops_per_insn = 1;
       info.li_default_is_stmt = byte_get (hdrptr, 1);
       hdrptr++;
       info.li_line_base = byte_get (hdrptr, 1);
@@ -2294,6 +2327,8 @@ display_debug_lines_raw (struct dwarf_se
       printf (_("  DWARF Version:               %d\n"), info.li_version);
       printf (_("  Prologue Length:             %d\n"), info.li_prologue_length);
       printf (_("  Minimum Instruction Length:  %d\n"), info.li_min_insn_length);
+      if (info.li_version >= 4)
+	printf (_("  Maximum Ops per Instruction: %d\n"), info.li_max_ops_per_insn);
       printf (_("  Initial value of 'is_stmt':  %d\n"), info.li_default_is_stmt);
       printf (_("  Line Base:                   %d\n"), info.li_line_base);
       printf (_("  Line Range:                  %d\n"), info.li_line_range);
@@ -2377,10 +2412,27 @@ display_debug_lines_raw (struct dwarf_se
 	  if (op_code >= info.li_opcode_base)
 	    {
 	      op_code -= info.li_opcode_base;
-	      uladv = (op_code / info.li_line_range) * info.li_min_insn_length;
-	      state_machine_regs.address += uladv;
-	      printf (_("  Special opcode %d: advance Address by %lu to 0x%lx"),
-		      op_code, uladv, state_machine_regs.address);
+	      uladv = (op_code / info.li_line_range);
+	      if (info.li_max_ops_per_insn == 1)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		  printf (_("  Special opcode %d: advance Address by %lu to 0x%lx"),
+			  op_code, uladv, state_machine_regs.address);
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		  printf (_("  Special opcode %d: advance Address by %lu to 0x%lx[%d]"),
+			  op_code, uladv, state_machine_regs.address,
+			  state_machine_regs.op_index);
+		}
 	      adv = (op_code % info.li_line_range) + info.li_line_base;
 	      state_machine_regs.line += adv;
 	      printf (_(" and Line by %d to %d\n"),
@@ -2398,11 +2450,27 @@ display_debug_lines_raw (struct dwarf_se
 
 	    case DW_LNS_advance_pc:
 	      uladv = read_leb128 (data, & bytes_read, 0);
-	      uladv *= info.li_min_insn_length;
 	      data += bytes_read;
-	      state_machine_regs.address += uladv;
-	      printf (_("  Advance PC by %lu to 0x%lx\n"), uladv,
-		      state_machine_regs.address);
+	      if (info.li_max_ops_per_insn == 1)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		  printf (_("  Advance PC by %lu to 0x%lx\n"), uladv,
+			  state_machine_regs.address);
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		  printf (_("  Advance PC by %lu to 0x%lx[%d]\n"), uladv,
+			  state_machine_regs.address,
+			  state_machine_regs.op_index);
+		}
 	      break;
 
 	    case DW_LNS_advance_line:
@@ -2441,17 +2509,34 @@ display_debug_lines_raw (struct dwarf_se
 	      break;
 
 	    case DW_LNS_const_add_pc:
-	      uladv = (((255 - info.li_opcode_base) / info.li_line_range)
-		      * info.li_min_insn_length);
-	      state_machine_regs.address += uladv;
-	      printf (_("  Advance PC by constant %lu to 0x%lx\n"), uladv,
-		      state_machine_regs.address);
+	      uladv = ((255 - info.li_opcode_base) / info.li_line_range);
+	      if (info.li_max_ops_per_insn)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		  printf (_("  Advance PC by constant %lu to 0x%lx\n"), uladv,
+			  state_machine_regs.address);
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		  printf (_("  Advance PC by constant %lu to 0x%lx[%d]\n"),
+			  uladv, state_machine_regs.address,
+			  state_machine_regs.op_index);
+		}
 	      break;
 
 	    case DW_LNS_fixed_advance_pc:
 	      uladv = byte_get (data, 2);
 	      data += 2;
 	      state_machine_regs.address += uladv;
+	      state_machine_regs.op_index = 0;
 	      printf (_("  Advance PC by fixed size amount %lu to 0x%lx\n"),
 		      uladv, state_machine_regs.address);
 	      break;
@@ -2554,9 +2639,11 @@ display_debug_lines_decoded (struct dwar
       /* Get this CU's Line Number Block version number.  */
       info.li_version = byte_get (hdrptr, 2);
       hdrptr += 2;
-      if (info.li_version != 2 && info.li_version != 3)
+      if (info.li_version != 2
+	  && info.li_version != 3
+	  && info.li_version != 4)
         {
-          warn (_("Only DWARF version 2 and 3 line info is currently "
+          warn (_("Only DWARF version 2, 3 and 4 line info is currently "
                 "supported.\n"));
           return 0;
         }
@@ -2565,6 +2652,18 @@ display_debug_lines_decoded (struct dwar
       hdrptr += offset_size;
       info.li_min_insn_length = byte_get (hdrptr, 1);
       hdrptr++;
+      if (info.li_version >= 4)
+	{
+	  info.li_max_ops_per_insn = byte_get (hdrptr, 1);
+	  hdrptr++;
+	  if (info.li_max_ops_per_insn == 0)
+	    {
+	      warn (_("Invalid maximum operations per insn.\n"));
+	      return 0;
+	    }
+	}
+      else
+	info.li_max_ops_per_insn = 1;
       info.li_default_is_stmt = byte_get (hdrptr, 1);
       hdrptr++;
       info.li_line_base = byte_get (hdrptr, 1);
@@ -2702,8 +2801,22 @@ display_debug_lines_decoded (struct dwar
           if (op_code >= info.li_opcode_base)
 	    {
 	      op_code -= info.li_opcode_base;
-              uladv = (op_code / info.li_line_range) * info.li_min_insn_length;
-              state_machine_regs.address += uladv;
+	      uladv = (op_code / info.li_line_range);
+	      if (info.li_max_ops_per_insn == 1)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		}
 
               adv = (op_code % info.li_line_range) + info.li_line_base;
               state_machine_regs.line += adv;
@@ -2737,6 +2850,7 @@ display_debug_lines_decoded (struct dwar
                   case DW_LNE_set_address:
                     state_machine_regs.address =
                     byte_get (op_code_data, ext_op_code_len - bytes_read - 1);
+		    state_machine_regs.op_index = 0;
                     break;
                   case DW_LNE_define_file:
                     {
@@ -2765,9 +2879,22 @@ display_debug_lines_decoded (struct dwar
 
             case DW_LNS_advance_pc:
               uladv = read_leb128 (data, & bytes_read, 0);
-              uladv *= info.li_min_insn_length;
               data += bytes_read;
-              state_machine_regs.address += uladv;
+	      if (info.li_max_ops_per_insn == 1)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		}
               break;
 
             case DW_LNS_advance_line:
@@ -2812,15 +2939,29 @@ display_debug_lines_decoded (struct dwar
               break;
 
             case DW_LNS_const_add_pc:
-              uladv = (((255 - info.li_opcode_base) / info.li_line_range)
-                       * info.li_min_insn_length);
-              state_machine_regs.address += uladv;
+	      uladv = ((255 - info.li_opcode_base) / info.li_line_range);
+	      if (info.li_max_ops_per_insn == 1)
+		{
+		  uladv *= info.li_min_insn_length;
+		  state_machine_regs.address += uladv;
+		}
+	      else
+		{
+		  state_machine_regs.address
+		    += ((state_machine_regs.op_index + uladv)
+			/ info.li_max_ops_per_insn)
+		       * info.li_min_insn_length;
+		  state_machine_regs.op_index
+		    = (state_machine_regs.op_index + uladv)
+		      % info.li_max_ops_per_insn;
+		}
               break;
 
             case DW_LNS_fixed_advance_pc:
               uladv = byte_get (data, 2);
               data += 2;
               state_machine_regs.address += uladv;
+	      state_machine_regs.op_index = 0;
               break;
 
             case DW_LNS_set_prologue_end:
@@ -2874,13 +3015,27 @@ display_debug_lines_decoded (struct dwar
 
               if (!do_wide || (fileNameLength <= MAX_FILENAME_LENGTH))
                 {
-                  printf (_("%-35s  %11d  %#18lx\n"), newFileName,
-                          state_machine_regs.line, state_machine_regs.address);
+		  if (info.li_max_ops_per_insn == 1)
+		    printf (_("%-35s  %11d  %#18lx\n"), newFileName,
+			    state_machine_regs.line,
+			    state_machine_regs.address);
+		  else
+		    printf (_("%-35s  %11d  %#18lx[%d]\n"), newFileName,
+			    state_machine_regs.line,
+			    state_machine_regs.address,
+			    state_machine_regs.op_index);
                 }
               else
                 {
-                  printf (_("%s  %11d  %#18lx\n"), newFileName,
-                          state_machine_regs.line, state_machine_regs.address);
+		  if (info.li_max_ops_per_insn == 1)
+		    printf (_("%s  %11d  %#18lx\n"), newFileName,
+			    state_machine_regs.line,
+			    state_machine_regs.address);
+		  else
+		    printf (_("%s  %11d  %#18lx[%d]\n"), newFileName,
+			    state_machine_regs.line,
+			    state_machine_regs.address,
+			    state_machine_regs.op_index);
                 }
 
               if (op_code == DW_LNE_end_sequence)
@@ -3751,6 +3906,8 @@ typedef struct Frame_Chunk
   int ra;
   unsigned char fde_encoding;
   unsigned char cfa_exp;
+  unsigned char ptr_size;
+  unsigned char segment_size;
 }
 Frame_Chunk;
 
@@ -3959,6 +4116,7 @@ display_debug_frames (struct dwarf_secti
   unsigned int length_return;
   int max_regs = 0;
   const char *bad_reg = _("bad register: ");
+  int saved_eh_addr_size = eh_addr_size;
 
   printf (_("Contents of the %s section:\n"), section->name);
 
@@ -3973,7 +4131,7 @@ display_debug_frames (struct dwarf_secti
       int need_col_headers = 1;
       unsigned char *augmentation_data = NULL;
       unsigned long augmentation_data_len = 0;
-      int encoded_ptr_size = eh_addr_size;
+      int encoded_ptr_size = saved_eh_addr_size;
       int offset_size;
       int initial_length_size;
 
@@ -4029,48 +4187,36 @@ display_debug_frames (struct dwarf_secti
 	  fc->augmentation = (char *) start;
 	  start = (unsigned char *) strchr ((char *) start, '\0') + 1;
 
-	  if (fc->augmentation[0] == 'z')
+	  if (strcmp (fc->augmentation, "eh") == 0)
+	    start += eh_addr_size;
+
+	  if (version >= 4)
 	    {
-	      fc->code_factor = LEB ();
-	      fc->data_factor = SLEB ();
-	      if (version == 1)
-		{
-		  fc->ra = GET (1);
-		}
-	      else
-		{
-		  fc->ra = LEB ();
-		}
-	      augmentation_data_len = LEB ();
-	      augmentation_data = start;
-	      start += augmentation_data_len;
+	      fc->ptr_size = GET (1);
+	      fc->segment_size = GET (1);
+	      eh_addr_size = fc->ptr_size;
 	    }
-	  else if (strcmp (fc->augmentation, "eh") == 0)
+	  else
 	    {
-	      start += eh_addr_size;
-	      fc->code_factor = LEB ();
-	      fc->data_factor = SLEB ();
-	      if (version == 1)
-		{
-		  fc->ra = GET (1);
-		}
-	      else
-		{
-		  fc->ra = LEB ();
-		}
+	      fc->ptr_size = eh_addr_size;
+	      fc->segment_size = 0;
+	    }
+	  fc->code_factor = LEB ();
+	  fc->data_factor = SLEB ();
+	  if (version == 1)
+	    {
+	      fc->ra = GET (1);
 	    }
 	  else
 	    {
-	      fc->code_factor = LEB ();
-	      fc->data_factor = SLEB ();
-	      if (version == 1)
-		{
-		  fc->ra = GET (1);
-		}
-	      else
-		{
-		  fc->ra = LEB ();
-		}
+	      fc->ra = LEB ();
+	    }
+
+	  if (fc->augmentation[0] == 'z')
+	    {
+	      augmentation_data_len = LEB ();
+	      augmentation_data = start;
+	      start += augmentation_data_len;
 	    }
 	  cie = fc;
 
@@ -4085,6 +4231,11 @@ display_debug_frames (struct dwarf_secti
 		      (unsigned long)(saved_start - section_start), length, cie_id);
 	      printf ("  Version:               %d\n", version);
 	      printf ("  Augmentation:          \"%s\"\n", fc->augmentation);
+	      if (version >= 4)
+		{
+		  printf ("  Pointer Size:          %u\n", fc->ptr_size);
+		  printf ("  Segment Size:          %u\n", fc->segment_size);
+		}
 	      printf ("  Code alignment factor: %u\n", fc->code_factor);
 	      printf ("  Data alignment factor: %d\n", fc->data_factor);
 	      printf ("  Return address column: %d\n", fc->ra);
@@ -4129,6 +4280,7 @@ display_debug_frames (struct dwarf_secti
 	{
 	  unsigned char *look_for;
 	  static Frame_Chunk fde_fc;
+	  unsigned long segment_selector;
 
 	  fc = & fde_fc;
 	  memset (fc, 0, sizeof (Frame_Chunk));
@@ -4150,6 +4302,8 @@ display_debug_frames (struct dwarf_secti
 	      cie = fc;
 	      fc->augmentation = "";
 	      fc->fde_encoding = 0;
+	      fc->ptr_size = eh_addr_size;
+	      fc->segment_size = 0;
 	    }
 	  else
 	    {
@@ -4159,6 +4313,9 @@ display_debug_frames (struct dwarf_secti
 	      memcpy (fc->col_type, cie->col_type, fc->ncols * sizeof (short int));
 	      memcpy (fc->col_offset, cie->col_offset, fc->ncols * sizeof (int));
 	      fc->augmentation = cie->augmentation;
+	      fc->ptr_size = cie->ptr_size;
+	      eh_addr_size = cie->ptr_size;
+	      fc->segment_size = cie->segment_size;
 	      fc->code_factor = cie->code_factor;
 	      fc->data_factor = cie->data_factor;
 	      fc->cfa_reg = cie->cfa_reg;
@@ -4171,6 +4328,12 @@ display_debug_frames (struct dwarf_secti
 	  if (fc->fde_encoding)
 	    encoded_ptr_size = size_of_encoded_value (fc->fde_encoding);
 
+	  segment_selector = 0;
+	  if (fc->segment_size)
+	    {
+	      segment_selector = byte_get (start, fc->segment_size);
+	      start += fc->segment_size;
+	    }
 	  fc->pc_begin = get_encoded_value (start, fc->fde_encoding);
 	  if ((fc->fde_encoding & 0x70) == DW_EH_PE_pcrel)
 	    fc->pc_begin += section->address + (start - section_start);
@@ -4185,10 +4348,12 @@ display_debug_frames (struct dwarf_secti
 	      start += augmentation_data_len;
 	    }
 
-	  printf ("\n%08lx %08lx %08lx FDE cie=%08lx pc=%08lx..%08lx\n",
+	  printf ("\n%08lx %08lx %08lx FDE cie=%08lx pc=",
 		  (unsigned long)(saved_start - section_start), length, cie_id,
-		  (unsigned long)(cie->chunk_start - section_start),
-		  fc->pc_begin, fc->pc_begin + fc->pc_range);
+		  (unsigned long)(cie->chunk_start - section_start));
+	  if (fc->segment_size)
+	    printf ("%04lx:", segment_selector);
+	  printf ("%08lx..%08lx\n", fc->pc_begin, fc->pc_begin + fc->pc_range);
 	  if (! do_debug_frames_interp && augmentation_data_len)
 	    {
 	      unsigned long i;
@@ -4736,6 +4901,7 @@ display_debug_frames (struct dwarf_secti
 	frame_display_row (fc, &need_col_headers, &max_regs);
 
       start = block_end;
+      eh_addr_size = saved_eh_addr_size;
     }
 
   printf ("\n");
Index: binutils-2.20.51.0.2/include/dwarf2.h
===================================================================
--- binutils-2.20.51.0.2.orig/include/dwarf2.h
+++ binutils-2.20.51.0.2/include/dwarf2.h
@@ -66,6 +66,7 @@ typedef struct
   unsigned short li_version;
   unsigned int   li_prologue_length;
   unsigned char  li_min_insn_length;
+  unsigned char  li_max_ops_per_insn;
   unsigned char  li_default_is_stmt;
   int            li_line_base;
   unsigned char  li_line_range;
